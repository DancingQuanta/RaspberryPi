##### usefull #####

+ f pdf & t r
p gdrive Unite
  tmux has-session -t unite
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s unite ; fi
  tmux send -t unite "./unite" ENTER

+ f * & t t
b move to btsync folder
  set %t
  while [ -n "$1" ] ; do
    mv "$1" "/media/hdd/btsync/$(basename "$1")"
    shift
  done

+ f * & t t
d upload to dropbox
  echo "clear" > ~/dropbox.sh
  d=%d
  echo "cd $d" >> ~/dropbox.sh
  set %t
  while [ -n "$1" ] ; do
    echo "~/dropbox_uploader.sh upload \"$1\" \"$1\"" >> ~/dropbox.sh
    shift
  done
  echo "pushbullet push all note Raspberry_Pi FilesUploadedToDropbox" >> ~/dropbox.sh
  tmux has-session -t dropbox
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s dropbox ; fi
  tmux send -t dropbox 'sh ~/dropbox.sh' ENTER
  tmux send -t dropbox 'rm ~/dropbox.sh' ENTER

+ f * & t r
e download from dropbox
  ~/dropbox_uploader.sh download %{Dropbox Filename} 
  
##### system #####

+ f system & t r
r sync rclone folder with gdrive
  tmux has-session -t rclone
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s rclone ; fi
  tmux send -t rclone 'rclone --config="/home/pi/.rclone.conf" sync pi://media/hdd/rclone gdrive://rclone' ENTER
  tmux send -t rclone 'pushbullet push all note "Rasperry Pi" "rclone: sync finished"' ENTER

+ f system & t r
r copy photos folder to Google Drive
  tmux has-session -t rclone
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s rclone ; fi
  tmux send -t rclone 'rclone --config="/home/pi/.rclone.conf" copy pi://media/hdd/photos gdrive://Photos' ENTER
  tmux send -t rclone 'pushbullet push all note "Rasperry Pi" "rclone: Photos copy finished"' ENTER

+ f system & t r
i dropbox info
  clear && ~/dropbox_uploader.sh info
  printf 'Press [Enter] key to continue...'
  read null

+ f system & t r
t dropbox init
  clear && ~/dropbox_uploader.sh init

+ f system & t r
u dropbox unlink
  clear && ~/dropbox_uploader.sh unlink

+ f system & t r
c raspi-config
  sudo raspi-config

+ f system & t r
a update/upgrade
  clear
  sudo apt-get -y autoremove
  sudo apt-get -y update
  sudo apt-get -y upgrade

+ f system & t r
h shutdown
  clear && sudo halt

+ f system & t r
r reboot
  clear && sudo reboot

##### config #####

+ f system & t r
i init youtube upload
  google youtube post -u %{Enter your gmail address} 

+ f system & t r
p init pushbullet API
  echo "API_KEY=%{Enter your API pushbullet}" > ~/.config/pushbullet

##### 3rd party #####

+ f 3rd_party  & t r
b start btsync
  clear && sudo btsync

+ f 3rd_party & t r
k stop btsync
  clear && sudo killall btsync
  
+ f 3rd_party & t r
r minidlna reload
  clear && sudo service minidlna force-reload

+ f 3rd_party  & t r
t minidlna status
  clear && sudo service minidlna status
  printf 'Press [Enter] key to continue...'
  read null

+ f 3rd_party & t r
s transmission start
  clear && sudo service transmission-daemon start
  
+ f 3rd_party & t r
t transmission status
  clear && sudo service transmission-daemon status
  printf 'Press [Enter] key to continue...'
  read null

+ f 3rd_party & t r
p transmission stop
  clear && sudo service transmission-daemon stop

+ f 3rd_party & t r
m sst start
  clear && omxplayer http://hi1.streamingsoundtracks.com:8000
  
+ f 3rd_party & t r
m sst stop
  clear && killall omxplayer

+ f 3rd_party & t r
y Youtube Download Playlist
  tmux has-session -t youtube_dl
  f [ "$?" -eq 1 ] ; then tmux new-session -d -s youtube_dl ; fi
  tmux send -t youtube "youtube-dl -cit --netrc --max-quality FORMAT --output '/media/hdd/youtube/%(title)s.%(ext)s' ~Playlist:http://www.youtube.com/playlist?list=~" ENTER


##### gopro #####  

+ f 3rd_party & t r
g gopro: sd copy
  cat >> ~/gopro_task.sh << EOF
  clear
  sudo mkdir /media/gopro
  sudo mount /dev/sdb1 /media/gopro
  mkdir /media/hdd/gopro/photos /media/hdd/gopro/videos
  cp -v /media/gopro/DCIM/???GOPRO/*.JPG /media/hdd/gopro/photos
  cp -v /media/gopro/DCIM/???GOPRO/*.MP4 /media/hdd/gopro/videos
  pushbullet push all note "photos and videos from gopro are saved"
  EOF
  tmux has-session -t gopro
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s gopro ; fi
  tmux send -t gopro 'sh ~/gopro_task.sh' ENTER
  
+ f *.MP4 & t r
g gopro: concat & upload
  tmux has-session -t gopro
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s gopro ; fi
  clear
  tmux send -t gopro 'clear' ENTER
  tmux send -t gopro 'cd %d' ENTER
  tmux send -t gopro 'mencoder `ls %d/*.MP4 | sort` -ovc copy -oac pcm -o %d/youtube.avi' ENTER
  tmux send -t gopro 'google youtube post --category Entertainment --access=unlisted %d/youtube.avi' ENTER
  tmux send -t gopro 'pushbullet push all note "Concatenated & Uploaded to Youtube"' ENTER

+ f *.avi & t t
y upload to youtube
  mkdir /media/hdd/tmp
  echo "clear" > ~/task.sh
  d=%d
  echo "cd $d" >> ~/task.sh
  set %t
  while [ -n "$1" ]; do
    echo "mv \"$1\" /media/hdd/tmp/video.avi" >> ~/task.sh
    echo "google youtube post --category Entertainment --access=unlisted --title=\"$1\" /media/hdd/tmp/video.avi" >> ~/task.sh
    echo "mv /media/hdd/tmp/video.avi \"$1\"" >> ~/task.sh
    echo "pushbullet push all note \"Raspberry Pi\" \"La vidéo $1 est maintenant sur YouTube\"" >> ~/task.sh
    shift
  done
  tmux has-session -t youtube
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s youtube ; fi
  tmux send -t youtube 'sh ~/task.sh' ENTER

+ f 3rd_party & t r
g gopro: create stopmotion
  cd %d
  mkdir CROP
  for img in *.JPG; do
  convert "$img" -crop 2592x1456+0+488 "CROP/$img-CROP.JPG" #bottom
  #convert $img -crop 2592x1456+0+0 CROP/$img-CROP.JPG #top
  #convert $img -crop 2592x1456+0+244 CROP/$img-CROP.JPG #middle
  done
  fi
  obr=$(($width * $height * 60 * 25 / 256))
  opt="vbitrate=$obr:mbd=2:keyint=132:vqblur=1.0:cmp=2:subcmp=2:dia=2:mv0:last_pred=3"
  codec="msmpeg4v2"
  ls -1 *-CROP.JPG >  files.lst
  mencoder -ovc lavc -lavcopts vcodec=$codec:vpass=1:$opt -mf type=jpg:w=$width:h=$height:fps=15 -vf harddup -nosound -o /dev/null mf://@files.lst
  mencoder -ovc lavc -lavcopts vcodec=$codec:vpass=2:$opt -mf type=jpg:w=$width:h=$height:fps=15 -vf harddup -nosound -o video.avi mf://@files.lst
  rm -f divx2pass.log
  fi

+ f *.avi | f *.AVI & t t
q x286 test
  tmux has-session -t mencoder
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s mencoder ; fi
  tmux send -t mencoder 'clear' ENTER
  tmux send -t mencoder 'cd %d' ENTER
  set %t
  while [ -n "$1" ]; do
     tmux send -t mencoder 'mencoder -vf yadif=1 -ovc x264 -oac mp3lame -o test.x264.avi %t' ENTER
    shift
  done
  tmux send -t mencoder 'echo "La vidéo %t est maintenant compilée" | sendxmpp -t cat .\email' ENTER

+ f *.avi | f *.AVI & t t
m merge videos mp3
  tmux has-session -t mencoder
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s mencoder ; fi
  tmux send -t mencoder 'clear' ENTER
  tmux send -t mencoder 'cd %d' ENTER
  tmux send -t mencoder 'mencoder -ovc copy -oac mp3lame -o %d.avi %t' ENTER
  tmux send -t mencoder 'pushbullet push all note "Rasperry Pi" "La vidéos %d.avi est compilée"' ENTER

##### gphotos2 #####

+ f *.jpg | f *.JPG & t t
P gphotos2 to hdd
  clear
  path=/media/hdd/photos
  stamp=$(date +%%Y%%m%%d%%H%%M%%S)
  mkdir -p "${path}/${stamp}"
  cd "${path}/${stamp}"
  gphoto2 --get-all-files --filename "%%Y%%m%%d%%H%%M%%S.%%C"
    if [ $? != 0 ]; then
    echo "*** error executing gphoto2, aborting."
    popd &> /dev/null
    exit 1
    fi
  google picasa create ${stamp} ${path}/${stamp}/*.JPG

+ d * & t d
e write exif when missing in jpg files
  cat > ~/exif_task.sh << 'EOF'
  clear
  find "%d" -iname "*.jpg" -type f | sort | while read FILE ; do
    EXI=`exiv2 "$FILE" 2> null | grep "Image timestamp" | cut -d ' ' -f 4 | tr ':' ' '`
    DAT=`echo "$(dirname "$FILE")" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | tr '-' ':'`
    if [ -z "$EXI" ]; then
      exiv2 -M "add Exif.Photo.DateTimeOriginal $DAT 00:00:00" "$FILE"
    fi
    printf "\r$(basename "$FILE")"
  done
  EOF
  tmux has-session -t photos
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s photos ; fi
  tmux send -t photos 'sh ~/exif_task.sh' ENTER
  tmux send -t photos 'rm ~/exif_task.sh' ENTER

+ d * & t d
R Rename photos
  cat > ~/rename_task.sh << 'EOF'
  if [ ! -f /usr/bin/exiv2 ]; then pushbullet push all note "Rasperry Pi" "ERROR: Please install exiv2"; exit; fi
  # Loop through files, renaming each to a YYYY:MM:DD_HH:MM:SS_#####.JPG based name
  COUNTER=1
  find "%d" -iname "*.jpg" -type f | sort | while read FILE ; do
    EXIF=`exiv2 "$FILE" 2> null | grep "Image timestamp" | cut -d ' ' -f 4,5 | tr ' ' '-'`
    NEWFILE="$EXIF-$(printf '%%05d' $COUNTER).JPG"
    echo "`basename "$FILE"`=>$NEWFILE"
    mv -u "$FILE" "`dirname "$FILE"`/$NEWFILE"
    COUNTER=$((COUNTER + 1))
  done
  # Loop again through files, renaming as "IMG_#####.JPG"
  COUNTER=1
  find "%d" -iname "*.jpg" -type f | sort | while read FILE ; do 
    NEWNAME="IMG_$(printf "%%05d" $COUNTER).JPG"
    mv "$FILE" "`dirname "$FILE"`/$NEWNAME"
    COUNTER=$((COUNTER + 1))
  done
  rm -f ~/rename_task.sh
  pushbullet push all note "Rasperry Pi" "Photos Renamer Done"
  EOF
  tmux has-session -t photos
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s photos ; fi
  tmux send -t photos 'sh ~/rename_task.sh' ENTER
  tmux send -t photos 'rm ~/rename_task.sh' ENTER

##### update #####

+ f update & t r
u update mc menu
  clear && curl -o ~/.config/mc/menu https://raw.githubusercontent.com/ManuCart/ServicePi/master/menu

##### tmux #####

+ f tmux & t r
1 attach youtube_dl session 
  tmux attach-session -t youtube_dl

+ f tmux & t r
2 attach rclone session 
  tmux attach-session -t rclone

+ f tmux & t r
3 attach mencoder session 
  tmux attach-session -t mencoder

+ f tmux & t r
4 attach youtube session
  tmux attach-session -t youtube

+ f tmux & t r
5 attach dropbox session
  tmux attach-session -t dropbox
  
+ f tmux & t r
6 attach gopro session
  tmux attach-session -t gopro

+ f tmux & t r
7 attach photos session
  tmux attach-session -t photos

##### useless ######

+ f *.djv | f *.djvu & t n
Décompose un fichier djvu en PBM
  x=0
  cible=""
  mkdir -p /tmp/djvu/
  mkdir -p /tmp/pbm/
  djvmcvt -i %f /tmp/djvu/ /tmp/index.djv
  find "/tmp/djvu/" -iname "*.djv" -type f | while read n; do
    xi=`expr $xi + 1`
    echo $xi
    ddjvu -format=tiff "$n" "/tmp/pbm/$xi.TIF"
  done

+ f *.jpg | f *.JPG & t r
e Affiche l'EXIF de la photo
  clear
  exiv2 %f
  printf 'Press [Enter] key to continue...'
  read null

+ f *.pdf | f *.PDF & t t
p Transforme un fichier PDF sécurisé en normal
  set %t
  while [ -n "$1" ]; do
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$1.test.pdf" "$1"
    shift
  done

+ f *.eps | f *.EPS | f *.ai | f *.AI & t t
s Convertir Un fichier EPS,AI en SVG
  set %t
  while [ -n "$1" ]; do
    pstoedit -f plot-svg $1 $1.svg
    shift
  done
