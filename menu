#    # # #####  #    # #  ####  #    # #####   ####   ####  #    # #    #   ##   #    # #####  ###### #####
##  ## # #    # ##   # # #    # #    #   #    #    # #    # ##  ## ##  ##  #  #  ##   # #    # #      #    #
# ## # # #    # # #  # # #      ######   #    #      #    # # ## # # ## # #    # # #  # #    # #####  #    #
#    # # #    # #  # # # #  ### #    #   #    #      #    # #    # #    # ###### #  # # #    # #      #####
#    # # #    # #   ## # #    # #    #   #    #    # #    # #    # #    # #    # #   ## #    # #      #   #
#    # # #####  #    # #  ####  #    #   #     ####   ####  #    # #    # #    # #    # #####  ###### #    #

+ f *.pdf & t r
p gdrive Unite
  tmux has-session -t unite
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s unite ; fi
  tmux send -t unite "./unite" ENTER

+ f * & t t
A move to "BitTorrentSync" folder
  set %t
  while [ -n "$1" ] ; do
    mv "$1" "/media/hdd/BitTorrentSync/$(basename "$1")"
    shift
  done

+ f * & t t
B move to "Freebox Server" folder
  if [ -f /tmp/freebox.sh ] ; then exit ; fi
  cat > /tmp/freebox.sh << 'EOF'
  clear
  sudo mount -t cifs //mafreebox.freebox.fr/Server\ Freebox/  /media/freebox -o user=freebox,password=mini4K,uid=1000,gid=1000,rw,sec=ntlm
  cd "%d"
  for f in %t; do
    rsync -aP --remove-sent-files "$f" /media/freebox
  done
  pushbullet push all note "Raspberry Pi" "Files moved to Freebox Server"
  rm /tmp/freebox.sh
  EOF
  tmux has-session -t freebox
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s freebox ; fi
  tmux send -t freebox 'sh /tmp/freebox.sh' ENTER

+ f * & t t
B upload to dropbox
  echo "clear" > ~/dropbox.sh
  d=%d
  echo "cd $d" >> ~/dropbox.sh
  set %t
  while [ -n "$1" ] ; do
    echo "dropbox_uploader upload \"$1\" \"$1\"" >> ~/dropbox.sh
    shift
  done
  echo "pushbullet push all note Raspberry_Pi FilesUploadedToDropbox" >> ~/dropbox.sh
  tmux has-session -t dropbox
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s dropbox ; fi
  tmux send -t dropbox 'sh ~/dropbox.sh' ENTER
  tmux send -t dropbox 'rm ~/dropbox.sh' ENTER

+ f * & t r
C download from dropbox
  dropbox_uploader download %{Dropbox Filename}
  
+ f * & t t
D upload to google drive
  echo "clear" > ~/google_drive.sh
  d=%d
  echo "cd $d" >> ~/google_drive.sh
  set %t
  while [ -n "$1" ] ; do
    echo "drive push \"$1\"" >> ~/google_drive.sh
    shift
  done
  echo "pushbullet push all note Raspberry_Pi FilesUploadedToGoogleDrive" >> ~/google_drive.sh
  tmux has-session -t dropbox
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s dropbox ; fi
  tmux send -t dropbox 'sh ~/google_drive.sh' ENTER
  tmux send -t dropbox 'rm ~/google_drive.sh' ENTER

+ f * & t r
E download from google drive
  drive pull %{Dropbox Filename}
  
#####    ##    ####  #    # #    # #####
#    #  #  #  #    # #   #  #    # #    #
#####  #    # #      ####   #    # #    #
#    # ###### #      #  #   #    # #####
#    # #    # #    # #   #  #    # #
#####  #    #  ####  #    #  ####  #

+ f backup & t r
1 sync /media/hdd/photos ==>> flickr
  tmux has-session -t flickr
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s flickr ; fi
  tmux send -t flickr 'flickrsmartsync --sync-path /media/hdd/photos' ENTER
  tmux send -t flickr 'pushbullet push all note "Rasperry Pi" "flickr: sync finished"' ENTER

+ f backup & t r
2 sync /media/hdd/rclone ==>> Google Drive/rclone
  tmux has-session -t rclone
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s rclone ; fi
  tmux send -t rclone 'rclone --config="/home/pi/.config/rclone.conf" sync pi://media/hdd/rclone gdrive://rclone' ENTER
  tmux send -t rclone 'pushbullet push all note "Rasperry Pi" "rclone: sync finished"' ENTER

+ f backup & t r
3 sync gdrive://Photos ==>> pi://media/hdd/photos
  tmux has-session -t rclone
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s rclone ; fi
  tmux send -t rclone 'rclone --config="/home/pi/.config/rclone.conf" sync gdrive://Photos pi://media/hdd/photos' ENTER
  tmux send -t rclone 'pushbullet push all note "Rasperry Pi" "rclone: Photos sync finished"' ENTER

+ f backup & t r
4 sync pi://media/hdd/photos ==>> pi://media/freebox/photos 
  tmux has-session -t rclone
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s rclone ; fi
  tmux send -t rclone 'rclone --config="/home/pi/.config/rclone.conf" sync pi://media/hdd/photos pi://media/freebox/photos' ENTER
  tmux send -t rclone 'pushbullet push all note "Rasperry Pi" "rclone: Photos sync finished"' ENTER

+ f backup & t r
5 *(O)* sync pi://media/hdd/photos ==>> gdrive://Photos
  tmux has-session -t rclone
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s rclone ; fi
  tmux send -t rclone 'rclone --config="/home/pi/.config/rclone.conf" sync pi://media/hdd/photos gdrive://Photos' ENTER
  tmux send -t rclone 'pushbullet push all note "Rasperry Pi" "rclone: Photos sync finished"' ENTER

+ f backup & t r
6 shrink /media/hdd/photos==>> Google+ account
  tmux has-session -t gplus
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s gplus ; fi
  tmux send -t gplus 'picasawebsync.py -d /media/hdd/photos --shrink' ENTER
  tmux send -t gplus 'pushbullet push all note "Rasperry Pi" "gplus: Photos sync to family account finished"' ENTER

+ f backup & t r
7 backup Youtube ==>> /hdd/youtube
  cat > /tmp/youtube_task.sh << 'EOF'
  clear
  google youtube list > /tmp/youtube.txt
  while read ligne
  do 
    URL=`echo "$ligne" | cut -d ',' -f  2`
    youtube-dl --max-quality FORMAT --output "/media/hdd/youtube/%(title)s.%(ext)s" "$URL"
  done < /tmp/youtube.txt
  rm /tmp/youtube.txt
  rm /tmp/youtube_task.sh
  EOF
  tmux has-session -t youtube_dl
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s youtube_dl ; fi
  tmux send -t youtube_dl 'bash /tmp/youtube_task.sh' ENTER
  
 ####  #   #  ####  ##### ###### #    #
#       # #  #        #   #      ##  ##
 ####    #    ####    #   #####  # ## #
     #   #        #   #   #      #    #
#    #   #   #    #   #   #      #    #
 ####    #    ####    #   ###### #    #

+ f system & t r
i [dropbox info]
  clear && ~/dropbox_uploader.sh info
  printf 'Press [Enter] key to continue...'
  read null

+ f system & t r
u dropbox unlink
  clear && ~/dropbox_uploader.sh unlink

+ f system & t r
c raspi-config
  sudo raspi-config

+ f system & t r
a [update/upgrade]
  clear
  sudo apt-get -y autoremove
  sudo apt-get -y update
  sudo apt-get -y dist-upgrade
  sudo apt-get -y upgrade
  sudo apt-get -y remove --auto-remove --purge libx11-.*
  
+ f system & t r
h [shutdown]
  clear && sudo halt

+ f system & t r
r [reboot]
  clear && sudo reboot

 ####   ####  #    # ###### #  ####
#    # #    # ##   # #      # #    #
#      #    # # #  # #####  # #
#      #    # #  # # #      # #  ###
#    # #    # #   ## #      # #    #
 ####   ####  #    # #      #  ####

+ f system & t r
i init youtube upload
  google youtube post -u %{Enter your gmail address} 

+ f system & t r
p init pushbullet API
  sudo curl https://raw.githubusercontent.com/Red5d/pushbullet-bash/master/pushbullet -o /usr/bin/pushbullet
  sudo chmod a+x /usr/bin/pushbullet
  clear && echo "Please visit https://www.pushbullet.com/account and"
  read -p "Enter Access Token: " API
  echo "API_KEY=$API" > ~/.config/pushbullet
  pushbullet push all note "Pushbullet tested :)"
  
+ f system & t r
t init dropbox
  sudo curl https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh -o /usr/bin/dropbox_uploader
  sudo chmod a+x /usr/bin/dropbox_uploader
  clear && dropbox_uploader init

##### #    # # #####  #####     #####    ##   #####  ##### #   #
  #   #    # # #    # #    #    #    #  #  #  #    #   #    # #
  #   ###### # #    # #    #    #    # #    # #    #   #     #
  #   #    # # #####  #    #    #####  ###### #####    #     #
  #   #    # # #   #  #    #    #      #    # #   #    #     #
  #   #    # # #    # #####     #      #    # #    #   #     #

+ f 3rd_party  & t r
b start btsync
  clear && sudo btsync --webui.listen 0.0.0.0:8888

+ f 3rd_party & t r
k stop btsync
  clear && sudo killall btsync
  
+ f 3rd_party & t r
r minidlna reload
  clear && sudo service minidlna force-reload

+ f 3rd_party  & t r
t minidlna status
  clear && sudo service minidlna status
  printf 'Press [Enter] key to continue...'
  read null

+ f 3rd_party  & t r
b start motion
  clear && motion

+ f 3rd_party & t r
k stop motion
  clear && sudo killall motion

+ f 3rd_party & t r
s transmission start
  clear && sudo service transmission-daemon start
  
+ f 3rd_party & t r
t transmission status
  clear && sudo service transmission-daemon status
  printf 'Press [Enter] key to continue...'
  read null

+ f 3rd_party & t r
p transmission stop
  clear && sudo service transmission-daemon stop

+ f 3rd_party & t r
m sst start
  clear && omxplayer http://hi1.streamingsoundtracks.com:8000
  
+ f 3rd_party & t r
m sst stop
  clear && killall omxplayer

 ####   ####  #####  #####   ####
#    # #    # #    # #    # #    #
#      #    # #    # #    # #    #
#  ### #    # #####  #####  #    #
#    # #    # #      #   #  #    #
 ####   ####  #      #    #  ####

+ f 3rd_party & t r
g gopro: sd copy
  cat >> /tmp/gopro_task.sh << EOF
  clear
  sudo mkdir /media/gopro
  sudo mount /dev/sdb1 /media/gopro
  mkdir /media/hdd/gopro/photos /media/hdd/gopro/videos
  cp -v /media/gopro/DCIM/???GOPRO/*.JPG /media/hdd/gopro/photos
  cp -v /media/gopro/DCIM/???GOPRO/*.MP4 /media/hdd/gopro/videos
  pushbullet push all note "photos and videos from gopro are saved"
  rm /tmp/gopro_task.sh
  EOF
  tmux has-session -t gopro
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s gopro ; fi
  tmux send -t gopro 'sh /tmp/gopro_task.sh' ENTER
  
+ f 3rd_party & t r
p panasonic: sd copy
  cat >> /tmp/panasonic_task.sh << EOF
  clear
  sudo mkdir /media/panasonic
  sudo mount LABEL=CANON_DC /media/panasonic
  mkdir /media/hdd/panasonic
  cp -v /media/panasonic/DCIM/???_PANA/*.JPG /media/hdd/panasonic
  pushbullet push all note "photos and videos from panasonic are saved"
  rm /tmp/panasonic_task.sh
  EOF
  tmux has-session -t gopro
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s gopro ; fi
  tmux send -t gopro 'sh /tmp/panasonic_task.sh' ENTER  
  
+ f *.avi | f *.AVI | f *.mov | f *.MOV | f *.mp4 | f *.MP4 & t r
g gopro: concat & upload
  tmux has-session -t gopro
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s gopro ; fi
  clear
  tmux send -t gopro 'clear' ENTER
  tmux send -t gopro 'cd %d' ENTER
  tmux send -t gopro 'mencoder `ls %d/*.* | sort` -ovc copy -oac pcm -o %d/youtube.avi' ENTER
  tmux send -t gopro 'youtube-upload --title="Video" --category="Entertainment" --privacy="private" --location="=" --client-secrets="/home/pi/.config/youtube.json" "%d/youtube.avi"' ENTER
  tmux send -t gopro 'pushbullet push all note "Concatenated & Uploaded to Youtube"' ENTER

+ f *.avi | f *.AVI | f *.mov | f *.MOV | f *.mp4 | f *.MP4 & t t
y upload to youtube [youtube screen]
  cat > /tmp/youtube_task.sh << 'EOF'
  mkdir /media/hdd/tmp
  clear
  cd "%d"
  for f in %t; do
    mv "$f" /media/hdd/tmp/video.avi
    youtube-upload --title="$f" --category="Entertainment" --privacy="private" \
    --location="=" --client-secrets="/home/pi/.config/youtube.json" /media/hdd/tmp/video.avi
    mv /media/hdd/tmp/video.avi "$f"
    pushbullet push all note "Raspberry Pi" "La vidéo $f est maintenant sur YouTube"
  done
  EOF
  tmux has-session -t youtube
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s youtube ; fi
  tmux send -t youtube 'sh /tmp/youtube_task.sh' ENTER

+ f *.jpg | f *.JPG & t r
g GOPRO : Create Stopmotion [stopmotion]
  cat > /tmp/stopmotion.sh << 'EOF'
  clear
  while true; do
    read -p "Image Crop : Top, Center or Bottom ?" answer
    case $answer in
        [Tt]* ) CUT="2592x1456+0+0"  ;break;;
        [Cc]* ) CUT="2592x1456+0+244";break;;
        [Bb]* ) CUT="2592x1456+0+488";break;;
        * ) echo "Please answer [T], [C] or [B]";;
    esac
  done
  cd %d
  mkdir CROP
  for img in *.JPG; do
  convert "$img" -crop $CUT "CROP/$img-CROP.JPG"
  done
  ls -1 CROP/*-CROP.JPG >  files.lst
  #mencoder mf://@files.lst -mf w=2592:h=1456:fps=15:type=jpg -ovc lavc -lavcopts vcodec=mpeg4:mbd=2:trell -nosound -o stopmotion.avi
  mencoder mf://@files.lst -mf type=jpg:fps=3 -ovc lavc -lavcopts vcodec=mjpeg -nosound -o stopmotion.avi
  youtube-upload --title="Video" --category="Entertainment" --privacy="private" --location="=" --client-secrets="/home/pi/.config/youtube.json" "stopmotion.avi"
  pushbullet push all note "Raspberry Pi" "Stopmotion created"
  EOF
  tmux has-session -t stopmotion
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s stopmotion ; fi
  tmux send -t stopmotion 'sh /tmp/stopmotion.sh' ENTER
  tmux attach-session -t stopmotion

+ f *.mov | f *.MOV | f *.avi | f *.AVI & tr
c cut video [no screen]
  clear
  read -e -p "Start : " -i "00:00:00" start
  read -e -p "Stop  : " -i "00:00:00" stop
  echo "Please Wait..."
  mencoder -ss $start -endpos $stop -really-quiet -ovc copy -oac pcm %f -o %b-CUT.%x
  pushbullet push all note "Rasperry Pi" "La vidéos %d.avi est coupée"

 ####  #####  #    #  ####  #####  ####
#    # #    # #    # #    #   #   #    #
#      #    # ###### #    #   #   #    #
#  ### #####  #    # #    #   #   #    #
#    # #      #    # #    #   #   #    #
 ####  #      #    #  ####    #    ####

+ f *.jpg | f *.JPG & t t
s Autolevel photos
  set %t
  while [ -n "$1" ]; do
    mogrify -auto-level $1
    shift
  done

+ d * & t d
c change directory date of photos and delete empty directory
  find "%d" -type d -empty -delete
  find "%d" -type d | while read DIR ; do
  DAT=`echo "$DIR" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | tr -d '-'`
  if [ ${#DAT} == 4 ]; then DAT=`echo "${DAT}0101"` ; fi
  touch -t "${DAT}0000.00" "$DIR"
  done

+ d * & t d
e write exif when missing in jpg files
  cat > ~/exif_task.sh << 'EOF'
  clear
  find "%d" -iname "*.jpg" -type f | sort | while read FILE ; do
    EXI=`exiv2 "$FILE" 2> null | grep "Image timestamp" | cut -d ' ' -f 4 | tr ':' ' '`
    DAT=`echo "$(dirname "$FILE")" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | tr '-' ':'`
    if [ -z "$EXI" ]; then
      exiv2 -M "add Exif.Photo.DateTimeOriginal $DAT 00:00:00" "$FILE"
    fi
    printf "\r$(basename "$FILE")"
  done
  EOF
  tmux has-session -t photos
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s photos ; fi
  tmux send -t photos 'sh ~/exif_task.sh' ENTER
  tmux send -t photos 'rm ~/exif_task.sh' ENTER

+ d * & t d
R Rename photos
  cat > ~/rename_task.sh << 'EOF'
  if [ ! -f /usr/bin/exiv2 ]; then pushbullet push all note "Rasperry Pi" "ERROR: Please install exiv2"; exit; fi
  # Loop through files, renaming each to a YYYYMMDDHHMMSS-#####.JPG based name
  COUNTER=1
  find "%d" -iname "*.jpg" -type f | sort | while read FILE ; do
    EXIF=`exiv2 "$FILE" 2> null | grep "Image timestamp" | cut -d ' ' -f 4,5 | tr -d ':' | tr -d ' '`
    NEWFILE="$EXIF-$(printf '%%05d' $COUNTER).JPG"
    echo "`basename "$FILE"`=>$NEWFILE"
    touch -t ${EXIF:0:12}.${EXIF:12:13} "$FILE"
    mv -u "$FILE" "`dirname "$FILE"`/$NEWFILE"
    COUNTER=$((COUNTER + 1))
  done
  # Loop again through files, renaming as "IMG_#####.JPG"
  COUNTER=1
  find "%d" -iname "*.jpg" -type f | sort | while read FILE ; do 
    NEWNAME="IMG_$(printf "%%05d" $COUNTER).JPG"
    mv "$FILE" "`dirname "$FILE"`/$NEWNAME"
    COUNTER=$((COUNTER + 1))
  done
  rm -f ~/rename_task.sh
  pushbullet push all note "Rasperry Pi" "Photos Renamer Done"
  EOF
  tmux has-session -t photos
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s photos ; fi
  tmux send -t photos 'sh ~/rename_task.sh' ENTER

+ d * & t d
R Do list of error JPG exif with folder name
  cat > ~/checkjpg_task.sh << 'EOF'
  if [ ! -f /usr/bin/exiv2 ]; then echo "ERROR: Please install exiv2"; exit; fi
  printf "IMG_XXXXX.JPG:DIR  DA TE==>EXIF DA TE\n" > "/tmp/photos.txt"
  # Loop through files, renaming each to a YYYY:MM:DD_HH:MM:SS_#####.JPG based name
  COUNTER=1
  find "%d" -iname "*.jpg" -type f | sort | while read FILE ; do 
  EXIF=`exiv2 "$FILE" 2> null | grep "Image timestamp" | cut -d ' ' -f 4 | tr ':' '-'`
  EXI=`echo "$EXIF" | cut -d '-' -f 1,2 | tr '-' ' '`
  EXI1=`date -d "$EXIF -1 month" +"%%Y %%m"`
  DAT=`echo "$(dirname "$FILE")" | rev | cut -d '/' -f 1 | rev | cut -d ' ' -f  1 | cut -d '-' -f 1,2 | tr '-' ' '`
  echo "EXIF : --$EXI-- EXI1 : --$EXI1-- DATE : --$DAT--"
    if [ -z "$EXI" ]; then
      printf "$(basename "$FILE"):" >> "/tmp/photos.txt" 
      printf "$DAT==>$EXI" >> "/tmp/photos.txt"
      printf " NO  DA TE" >> "/tmp/photos.txt"
      printf "\n" >> "/tmp/photos.txt"
    fi
    if [[ "$DAT" != "$EXI" && "$DAT" != "$EXI1" ]]; then
      printf "$(basename "$FILE"):" >> "/tmp/photos.txt" 
      printf "$DAT==>$EXI" >> "/tmp/photos.txt"
      printf " NOT MATCH" >> "/tmp/photos.txt"
      printf "\n" >> "/tmp/photos.txt"
    fi
  done
  rm ~/checkjpg_task.sh
  pushbullet push all note "Rasperry Pi" "Photos Control Done"
  EOF
  tmux has-session -t photos
  if [ "$?" -eq 1 ] ; then tmux new-session -d -s photos ; fi
  tmux send -t photos 'sh ~/checkjpg_task.sh' ENTER
  
#    # #####  #####    ##   ##### ######
#    # #    # #    #  #  #    #   #
#    # #    # #    # #    #   #   #####
#    # #####  #    # ######   #   #
#    # #      #    # #    #   #   #
 ####  #      #####  #    #   #   ######

+ f update & t r
u update mc menu
  clear && curl -o ~/.config/mc/menu https://raw.githubusercontent.com/ManuCart/ServicePi/master/menu

####### #     # #     # #     #
   #    ##   ## #     #  #   #
   #    # # # # #     #   # #
   #    #  #  # #     #    #
   #    #     # #     #   # #
   #    #     # #     #  #   #
   #    #     #  #####  #     #

+ f tmux & t r
1 attach dropbox session
  tmux attach-session -t dropbox

+ f tmux & t r
2 attach flickr session
  tmux attach-session -t flickr

+ f tmux & t r
3 attach gplus session
  tmux attach-session -t gplus

+ f tmux & t r
4 attach gopro session
  tmux attach-session -t gopro

+ f tmux & t r
5 attach mencoder session
  tmux attach-session -t mencoder

+ f tmux & t r
6 attach photos session
  tmux attach-session -t photos

+ f tmux & t r
7 attach rclone session
  tmux attach-session -t rclone

+ f tmux & t r
8 attach stopmotion session
  tmux attach-session -t stopmotion

+ f tmux & t r
9 attach youtube session
  tmux attach-session -t youtube

+ f tmux & t r
0 attach youtube_dl session
  tmux attach-session -t youtube_dl
  
+ f tmux & t r
A attach freebox session
  tmux attach-session -t freebox

#    #  ####  ###### #      ######  ####   ####
#    # #      #      #      #      #      #
#    #  ####  #####  #      #####   ####   ####
#    #      # #      #      #           #      #
#    # #    # #      #      #      #    # #    #
 ####   ####  ###### ###### ######  ####   ####

+ f *.jpg | f *.JPG & t t
e Ecrit l'EXIF des photos
  DAT=%{YYYY:MM:DD}
  set %t
  while [ -n "$1" ] ; do
    exiv2 -M "add Exif.Photo.DateTimeOriginal $DAT 00:00:00" $1
    shift
  done
  
+ f *.jpg | f *.JPG & t r
e Affiche l'EXIF de la photo
  clear
  exiv2 %f
  printf 'Press [Enter] key to continue...'
  read null

+ f *.pdf | f *.PDF & t t
p Transforme un fichier PDF sécurisé en normal
  set %t
  while [ -n "$1" ]; do
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$1.test.pdf" "$1"
    shift
  done

+ f *.eps | f *.EPS | f *.ai | f *.AI & t t
s Convertir Un fichier EPS,AI en SVG
  set %t
  while [ -n "$1" ]; do
    pstoedit -f plot-svg $1 $1.svg
    shift
  done
